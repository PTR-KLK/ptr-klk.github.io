{"version":3,"sources":["webpack:///./src/components/latest/components/list.js","webpack:///./src/components/latest/latest.js","webpack:///./src/components/author.js","webpack:///./src/pages/index.js"],"names":["ListItem","str","data","frontmatter","last_modified","Date","toLocaleDateString","to","fields","slug","title","description","excerpt","List","list","details","map","node","key","id","Latest","latest","useStaticQuery","edges","Container","styled","section","theme","secondary","Stripes","div","body","Image","Img","Author","me","about","nodes","fluid","childImageSharp","objectFit","alt","Home","siteMetadata","site","graph","projects","contact"],"mappings":"+JAQMA,EAAW,SAAC,GAAc,IALXC,EAKDC,EAAW,EAAXA,KAClB,OACE,4BACE,4BACE,+BATaD,EASMC,EAAKC,YAAYC,cAR7B,IAAIC,KAAKJ,GACVK,sBAON,OACA,kBAAC,OAAD,CAAMC,GAAIL,EAAKM,OAAOC,MAAOP,EAAKC,YAAYO,MAA9C,MAEF,2BAAIR,EAAKC,YAAYQ,aAAeT,EAAKU,WAchCC,EAVF,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QACpB,OACE,4BACGD,EAAKE,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OACR,kBAAC,EAAD,CAAUf,KAAMe,EAAMC,IAAKD,EAAKE,GAAIJ,QAASA,SCgBtCK,EAnCA,WAAO,IAEDC,EACfC,yBAAe,cADjBD,OAAUE,MAyBZ,OACE,iCACE,+CACA,kBAAC,EAAD,CAAMT,KAAMO,M,yDC5BZG,EAAYC,UAAOC,QAAV,wEAAGD,CAAH,gfAcF,qBAAGE,MAAkBC,aA+B5BC,EAAUJ,UAAOK,IAAV,sEAAGL,CAAH,qmBAQK,qBAAGE,MAAkBC,aAWrB,qBAAGD,MAAkBI,QAWrB,qBAAGJ,MAAkBI,QA0BjCC,EAAQP,kBAAOQ,KAAV,oEAAGR,CAAH,uFA+CIS,EArCA,WAAO,IAAD,EAMfZ,yBAAe,cAJjBa,EAFiB,EAEjBA,GAEUC,EAJO,EAGjBA,MACEC,MAJe,GA0BnB,OACE,kBAACb,EAAD,KACE,kBAACK,EAAD,MACA,kBAACG,EAAD,CAAOM,MAAOH,EAAGI,gBAAgBD,MAAOE,UAAU,QAAQC,IAAI,KAC9D,kBAAC,IAAD,CAAYV,KAAMK,EAAML,MACtB,yCC1DOW,UAjFF,SAAC,GAAc,IAAZxC,EAAW,EAAXA,KAEJyC,EAQNzC,EARF0C,KAAQD,aACQE,EAOd3C,EAPF2C,MAASR,MAECS,EAKR5C,EANF4C,SACET,MALqB,GAQbU,EAER7C,EAHF6C,QACEV,MARqB,GAYzB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAK3B,MAAM,QAAQC,YAAagC,EAAahC,cAC7C,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAYoB,KAAMe,EAASf,MACzB,4BAAKe,EAAS3C,YAAYO,QAE5B,kBAAC,IAAD,CAAYqB,KAAMgB,EAAQhB,MACxB,4BAAKgB,EAAQ5C,YAAYO,QAE3B,kBAAC,IAAD,CAAOR,KAAM2C","file":"component---src-pages-index-js-4c2f629771f3867836a3.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"gatsby\";\n\nconst convertDate = (str) => {\n  const date = new Date(str);\n  return date.toLocaleDateString();\n};\n\nconst ListItem = ({ data }) => {\n  return (\n    <li>\n      <h3>\n        <span>{convertDate(data.frontmatter.last_modified)} â€” </span>\n        <Link to={data.fields.slug}>{data.frontmatter.title} </Link>\n      </h3>\n      <p>{data.frontmatter.description || data.excerpt}</p>\n    </li>\n  );\n};\nconst List = ({ list, details }) => {\n  return (\n    <ul>\n      {list.map(({ node }) => (\n        <ListItem data={node} key={node.id} details={details} />\n      ))}\n    </ul>\n  );\n};\n\nexport default List;\n","import React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport List from \"./components/list\";\n\nconst Latest = () => {\n  const {\n    latest: { edges: latest },\n  } = useStaticQuery(graphql`\n    query {\n      latest: allMdx(\n        limit: 5\n        sort: { fields: frontmatter___last_modified, order: DESC }\n      ) {\n        edges {\n          node {\n            id\n            frontmatter {\n              title\n              description\n              date\n              last_modified\n            }\n            fields {\n              slug\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  return (\n    <section>\n      <h2>Latest updates:</h2>\n      <List list={latest} />\n    </section>\n  );\n};\n\nexport default Latest;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport Img from \"gatsby-image\";\nimport MdxContent from \"./mdxContent\";\n\nconst Container = styled.section`\n  width: 100%;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 1rem 0 1.625rem;\n\n  h2 {\n    font-size: 4rem;\n    line-height: 3rem;\n    margin: 1rem 1rem 0;\n    font-family: \"Inconsolata\", monospace;\n    display: block;\n    color: ${({ theme }) => theme.secondary};\n  }\n\n  p {\n    text-align: justify;\n    margin: 1rem;\n  }\n\n  @media (min-width: 768px) {\n    flex-direction: row;\n    border: none;\n    margin: calc(2rem + 5px) 0 2.625rem;\n    padding: 0;\n\n    section {\n      position: relative;\n      top: -0.375rem;\n    }\n\n    h2 {\n      margin: 0 1rem;\n      font-size: 4rem;\n      line-height: 3rem;\n    }\n\n    p {\n      margin: 1rem calc(2rem + 5px) 1rem 1rem;\n    }\n  }\n`;\n\nconst Stripes = styled.div`\n  position: absolute;\n  top: 1rem;\n  left: 0;\n  width: calc(100% + 6px - 1rem);\n  z-index: 1;\n  height: calc(100% - 1rem);\n  border-style: solid dashed dashed solid;\n  border-color: ${({ theme }) => theme.secondary};\n  border-width: 5px;\n\n  &::after {\n    content: \"\";\n    position: absolute;\n    bottom: 0;\n    left: -5px;\n    height: 50%;\n    width: 5px;\n    z-index: 2;\n    background: ${({ theme }) => theme.body};\n  }\n\n  &::before {\n    content: \"\";\n    position: absolute;\n    right: -5px;\n    top: 0;\n    width: 5px;\n    height: 50%;\n    z-index: 2;\n    background: ${({ theme }) => theme.body};\n  }\n\n  @media (min-width: 768px) {\n    top: calc(-5px - 1rem);\n    left: 1rem;\n    width: calc(100% + 6px - 3rem);\n    height: calc(100% + 2rem + 5px);\n\n    &::after {\n      bottom: -5px;\n      left: 0;\n      height: 5px;\n      width: 50%;\n    }\n\n    &::before {\n      right: 0;\n      top: -5px;\n      height: 5px;\n      width: 50%;\n      z-index: 1;\n    }\n  }\n`;\n\nconst Image = styled(Img)`\n  width: 100%;\n  max-width: 192px;\n  height: auto;\n\n  @media (min-width: 320px) {\n    max-width: 256px;\n  }\n`;\n\nconst Author = () => {\n  const {\n    me,\n    about: {\n      nodes: [about],\n    },\n  } = useStaticQuery(graphql`\n    {\n      me: file(relativePath: { eq: \"me.jpg\" }) {\n        childImageSharp {\n          fluid(maxWidth: 448) {\n            ...GatsbyImageSharpFluid_tracedSVG\n          }\n        }\n      }\n      about: allMdx(filter: { frontmatter: { title: { eq: \"About\" } } }) {\n        nodes {\n          frontmatter {\n            title\n          }\n          body\n        }\n      }\n    }\n  `);\n\n  return (\n    <Container>\n      <Stripes />\n      <Image fluid={me.childImageSharp.fluid} objectFit=\"cover\" alt=\"\" />\n      <MdxContent body={about.body}>\n        <h2>Hello!</h2>\n      </MdxContent>\n    </Container>\n  );\n};\n\nexport default Author;\n","import React from \"react\";\nimport { graphql } from \"gatsby\";\nimport Layout from \"../components/layout/layout\";\nimport Seo from \"../components/seo\";\nimport Latest from \"../components/latest/latest\";\nimport Graph from \"../components/graph/graphWrapper\";\nimport Author from \"../components/author\";\nimport MdxContent from \"../components/mdxContent\";\n\nconst Home = ({ data }) => {\n  const {\n    site: { siteMetadata },\n    graph: { nodes: graph },\n    projects: {\n      nodes: [projects],\n    },\n    contact: {\n      nodes: [contact],\n    },\n  } = data;\n\n  return (\n    <Layout>\n      <Seo title=\"Index\" description={siteMetadata.description} />\n      <Author />\n      <Latest />\n      <MdxContent body={projects.body}>\n        <h2>{projects.frontmatter.title}</h2>\n      </MdxContent>\n      <MdxContent body={contact.body}>\n        <h2>{contact.frontmatter.title}</h2>\n      </MdxContent>\n      <Graph data={graph} />\n    </Layout>\n  );\n};\n\nexport const query = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n    graph: allMdx {\n      nodes {\n        id\n        frontmatter {\n          title\n        }\n        fields {\n          slug\n        }\n        outboundReferences {\n          ... on Mdx {\n            id\n            frontmatter {\n              title\n            }\n          }\n        }\n        inboundReferences {\n          ... on Mdx {\n            id\n            frontmatter {\n              title\n            }\n          }\n        }\n      }\n    }\n    projects: allMdx(filter: { frontmatter: { title: { eq: \"Projects\" } } }) {\n      nodes {\n        frontmatter {\n          title\n        }\n        body\n      }\n    }\n    contact: allMdx(filter: { frontmatter: { title: { eq: \"Contact\" } } }) {\n      nodes {\n        frontmatter {\n          title\n        }\n        body\n      }\n    }\n  }\n`;\nexport default Home;\n"],"sourceRoot":""}