{"version":3,"sources":["webpack:///./src/components/latest/components/list.js","webpack:///./src/components/latest/latest.js","webpack:///./src/components/author.js","webpack:///./src/pages/index.js"],"names":["ListItem","str","data","frontmatter","last_modified","Date","toLocaleDateString","to","fields","slug","title","description","excerpt","List","list","details","map","node","key","id","Container","styled","section","Latest","latest","useStaticQuery","edges","theme","primary","boxShadow","Image","Img","Hello","h2","secondary","Author","me","frontpage","nodes","body","fluid","childImageSharp","objectFit","alt","Home","siteMetadata","site","graph","recommended"],"mappings":"2KAQMA,EAAW,SAAC,GAAc,IALXC,EAKDC,EAAW,EAAXA,KAClB,OACE,4BACE,4BACE,+BATaD,EASMC,EAAKC,YAAYC,cAR7B,IAAIC,KAAKJ,GACVK,sBAON,OACA,kBAAC,OAAD,CAAMC,GAAIL,EAAKM,OAAOC,MAAOP,EAAKC,YAAYO,MAA9C,MAEF,2BAAIR,EAAKC,YAAYQ,aAAeT,EAAKU,WAchCC,EAVF,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QACpB,OACE,4BACGD,EAAKE,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OACR,kBAAC,EAAD,CAAUf,KAAMe,EAAMC,IAAKD,EAAKE,GAAIJ,QAASA,SClB/CK,EAAYC,UAAOC,QAAV,wEAAGD,CAAH,iBAuCAE,EAnCA,WAAO,IAEDC,EACfC,yBAAe,cADjBD,OAAUE,MAyBZ,OACE,kBAACN,EAAD,KACE,+CACA,kBAAC,EAAD,CAAMN,KAAMU,M,yDChCZJ,EAAYC,UAAOC,QAAV,wEAAGD,CAAH,qIAMC,qBAAGM,MAAkBC,WAEjC,gBAAGD,EAAH,EAAGA,MAAH,OAAeE,YAAUF,MAGvBG,EAAQT,kBAAOU,KAAV,oEAAGV,CAAH,gMACP,gBAAGM,EAAH,EAAGA,MAAH,OAAeE,YAAUF,MAgBvBK,EAAQX,UAAOY,GAAV,oEAAGZ,CAAH,gEAIA,qBAAGM,MAAkBO,aAyCjBC,EAtCA,WAAO,IAAD,EAMfV,yBAAe,cAJjBW,EAFiB,EAEjBA,GAEUC,EAJO,EAGjBA,UACEC,MAJe,GA4BnB,OACE,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAYC,KAAMF,EAAUE,MAC1B,kBAACT,EAAD,CAAOU,MAAOJ,EAAGK,gBAAgBD,MAAOE,UAAU,QAAQC,IAAI,KAC9D,kBAACX,EAAD,kBCIOY,UArEF,SAAC,GAAc,IAAZ1C,EAAW,EAAXA,KAEJ2C,EAKN3C,EALF4C,KAAQD,aACQE,EAId7C,EAJF6C,MAAST,MAECU,EAER9C,EAHF8C,YACEV,MALqB,GASzB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAK5B,MAAM,QAAQC,YAAakC,EAAalC,cAC7C,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAY4B,KAAMS,EAAYT,MAC5B,4BAAKS,EAAY7C,YAAYO,QAE/B,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOR,KAAM6C","file":"component---src-pages-index-js-25b681ae637eb0af3412.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"gatsby\";\n\nconst convertDate = (str) => {\n  const date = new Date(str);\n  return date.toLocaleDateString();\n};\n\nconst ListItem = ({ data }) => {\n  return (\n    <li>\n      <h3>\n        <span>{convertDate(data.frontmatter.last_modified)} â€” </span>\n        <Link to={data.fields.slug}>{data.frontmatter.title} </Link>\n      </h3>\n      <p>{data.frontmatter.description || data.excerpt}</p>\n    </li>\n  );\n};\nconst List = ({ list, details }) => {\n  return (\n    <ul>\n      {list.map(({ node }) => (\n        <ListItem data={node} key={node.id} details={details} />\n      ))}\n    </ul>\n  );\n};\n\nexport default List;\n","import React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport styled from \"styled-components\";\nimport List from \"./components/list\";\n\nconst Container = styled.section`\n  width: 100%;\n`;\n\nconst Latest = () => {\n  const {\n    latest: { edges: latest },\n  } = useStaticQuery(graphql`\n    query {\n      latest: allMdx(\n        limit: 5\n        sort: { fields: frontmatter___last_modified, order: DESC }\n      ) {\n        edges {\n          node {\n            id\n            frontmatter {\n              title\n              description\n              date\n              last_modified\n            }\n            fields {\n              slug\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  return (\n    <Container>\n      <h2>Latest updates:</h2>\n      <List list={latest} />\n    </Container>\n  );\n};\n\nexport default Latest;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Img from \"gatsby-image\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport MdxContent from \"../components/mdxContent\";\nimport { boxShadow } from \"./boxShadow\";\n\nconst Container = styled.section`\n  position: relative;\n  width: calc(100% - 2rem);\n  margin: 1rem 0;\n  padding: 1rem 1rem 0;\n  text-align: justify;\n  background: ${({ theme }) => theme.primary};\n  display: flex;\n  ${({ theme }) => boxShadow(theme)};\n`;\n\nconst Image = styled(Img)`\n  ${({ theme }) => boxShadow(theme)};\n  width: 100%;\n  max-width: 192px;\n  margin: 1rem auto;\n  height: auto;\n\n  @media (min-width: 433px) {\n    margin: 0 calc(1rem + 2px) calc(0.5rem + 2px) 0;\n    float: left;\n  }\n\n  @media (min-width: 768px) {\n    max-width: 256px;\n  }\n`;\n\nconst Hello = styled.h2`\n  font-size: 3rem;\n  line-height: 2rem;\n  margin: 0 0 1rem;\n  color: ${({ theme }) => theme.secondary};\n`;\n\nconst Author = () => {\n  const {\n    me,\n    frontpage: {\n      nodes: [frontpage],\n    },\n  } = useStaticQuery(graphql`\n    query {\n      me: file(relativePath: { eq: \"me.jpg\" }) {\n        childImageSharp {\n          fluid(maxWidth: 448) {\n            ...GatsbyImageSharpFluid_tracedSVG\n          }\n        }\n      }\n      frontpage: allMdx(\n        filter: { frontmatter: { title: { eq: \"Frontpage\" } } }\n      ) {\n        nodes {\n          frontmatter {\n            title\n          }\n          body\n        }\n      }\n    }\n  `);\n\n  return (\n    <Container>\n      <MdxContent body={frontpage.body}>\n        <Image fluid={me.childImageSharp.fluid} objectFit=\"cover\" alt=\"\" />\n        <Hello>Hello!</Hello>\n      </MdxContent>\n    </Container>\n  );\n};\n\nexport default Author;\n","import React from \"react\";\nimport { graphql } from \"gatsby\";\nimport Layout from \"../components/layout/layout\";\nimport Seo from \"../components/seo\";\nimport Latest from \"../components/latest/latest\";\nimport Graph from \"../components/graph/graphWrapper\";\nimport Author from \"../components/author\";\nimport MdxContent from \"../components/mdxContent\";\n\nconst Home = ({ data }) => {\n  const {\n    site: { siteMetadata },\n    graph: { nodes: graph },\n    recommended: {\n      nodes: [recommended],\n    },\n  } = data;\n\n  return (\n    <Layout>\n      <Seo title=\"Index\" description={siteMetadata.description} />\n      <Author />\n      <MdxContent body={recommended.body}>\n        <h2>{recommended.frontmatter.title}</h2>\n      </MdxContent>\n      <Latest />\n      <Graph data={graph} />\n    </Layout>\n  );\n};\n\nexport const query = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n    graph: allMdx {\n      nodes {\n        id\n        frontmatter {\n          title\n        }\n        fields {\n          slug\n        }\n        outboundReferences {\n          ... on Mdx {\n            id\n            frontmatter {\n              title\n            }\n          }\n        }\n        inboundReferences {\n          ... on Mdx {\n            id\n            frontmatter {\n              title\n            }\n          }\n        }\n      }\n    }\n    recommended: allMdx(\n      filter: { frontmatter: { title: { eq: \"Recommended\" } } }\n    ) {\n      nodes {\n        frontmatter {\n          title\n        }\n        body\n      }\n    }\n  }\n`;\nexport default Home;\n"],"sourceRoot":""}