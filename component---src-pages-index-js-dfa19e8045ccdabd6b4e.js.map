{"version":3,"sources":["webpack:///./src/components/latest/components/list.js","webpack:///./src/components/latest/latest.js","webpack:///./src/pages/index.js"],"names":["ListItem","str","data","frontmatter","last_modified","Date","toLocaleDateString","to","fields","slug","title","description","excerpt","List","list","details","map","node","key","id","Container","styled","section","Latest","latest","useStaticQuery","edges","Home","siteMetadata","site","graph","nodes","frontpage","body"],"mappings":"2KAQMA,EAAW,SAAC,GAAc,IALXC,EAKDC,EAAW,EAAXA,KAClB,OACE,4BACE,4BACE,+BATaD,EASMC,EAAKC,YAAYC,cAR7B,IAAIC,KAAKJ,GACVK,sBAON,OACA,kBAAC,OAAD,CAAMC,GAAIL,EAAKM,OAAOC,MAAOP,EAAKC,YAAYO,MAA9C,MAEF,2BAAIR,EAAKC,YAAYQ,aAAeT,EAAKU,WAchCC,EAVF,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QACpB,OACE,4BACGD,EAAKE,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OACR,kBAAC,EAAD,CAAUf,KAAMe,EAAMC,IAAKD,EAAKE,GAAIJ,QAASA,SClB/CK,EAAYC,UAAOC,QAAV,wEAAGD,CAAH,iBAuCAE,EAnCA,WAAO,IAEDC,EACfC,yBAAe,cADjBD,OAAUE,MAyBZ,OACE,kBAACN,EAAD,KACE,+CACA,kBAAC,EAAD,CAAMN,KAAMU,M,wBCmCHG,UAlEF,SAAC,GAAc,IAAZzB,EAAW,EAAXA,KAEJ0B,EAKN1B,EALF2B,KAAQD,aACQE,EAId5B,EAJF4B,MAASC,MAECC,EAER9B,EAHF8B,UACED,MALqB,GASzB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKrB,MAAM,QAAQC,YAAaiB,EAAajB,cAC7C,kBAAC,IAAD,CAAYsB,KAAMD,EAAUC,MAC1B,uCAEF,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAO/B,KAAM4B","file":"component---src-pages-index-js-dfa19e8045ccdabd6b4e.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"gatsby\";\n\nconst convertDate = (str) => {\n  const date = new Date(str);\n  return date.toLocaleDateString();\n};\n\nconst ListItem = ({ data }) => {\n  return (\n    <li>\n      <h3>\n        <span>{convertDate(data.frontmatter.last_modified)} â€” </span>\n        <Link to={data.fields.slug}>{data.frontmatter.title} </Link>\n      </h3>\n      <p>{data.frontmatter.description || data.excerpt}</p>\n    </li>\n  );\n};\nconst List = ({ list, details }) => {\n  return (\n    <ul>\n      {list.map(({ node }) => (\n        <ListItem data={node} key={node.id} details={details} />\n      ))}\n    </ul>\n  );\n};\n\nexport default List;\n","import React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport styled from \"styled-components\";\nimport List from \"./components/list\";\n\nconst Container = styled.section`\n  width: 100%;\n`;\n\nconst Latest = () => {\n  const {\n    latest: { edges: latest },\n  } = useStaticQuery(graphql`\n    query {\n      latest: allMdx(\n        limit: 3\n        sort: { fields: frontmatter___last_modified, order: DESC }\n      ) {\n        edges {\n          node {\n            id\n            frontmatter {\n              title\n              description\n              date\n              last_modified\n            }\n            fields {\n              slug\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  return (\n    <Container>\n      <h2>Latest updates:</h2>\n      <List list={latest} />\n    </Container>\n  );\n};\n\nexport default Latest;\n","import React from \"react\";\nimport { graphql } from \"gatsby\";\nimport Layout from \"../components/layout/layout\";\nimport Seo from \"../components/seo\";\nimport Latest from \"../components/latest/latest\";\nimport Graph from \"../components/graph/graphWrapper\";\nimport MdxContent from \"../components/mdxContent\";\n\nconst Home = ({ data }) => {\n  const {\n    site: { siteMetadata },\n    graph: { nodes: graph },\n    frontpage: {\n      nodes: [frontpage],\n    },\n  } = data;\n\n  return (\n    <Layout>\n      <Seo title=\"Index\" description={siteMetadata.description} />\n      <MdxContent body={frontpage.body}>\n        <h2>Hello!</h2>\n      </MdxContent>\n      <Latest />\n      <Graph data={graph} />\n    </Layout>\n  );\n};\n\nexport const query = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n    graph: allMdx {\n      nodes {\n        id\n        frontmatter {\n          title\n        }\n        fields {\n          slug\n        }\n        outboundReferences {\n          ... on Mdx {\n            id\n            frontmatter {\n              title\n            }\n          }\n        }\n        inboundReferences {\n          ... on Mdx {\n            id\n            frontmatter {\n              title\n            }\n          }\n        }\n      }\n    }\n    frontpage: allMdx(filter: { frontmatter: { title: { eq: \"Frontpage\" } } }) {\n      nodes {\n        frontmatter {\n          title\n        }\n        body\n      }\n    }\n  }\n`;\nexport default Home;\n"],"sourceRoot":""}